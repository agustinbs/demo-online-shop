<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>inventory-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>event-sourcing/inventory-service</name>

	<parent>
		<groupId>org.kbastani</groupId>
		<artifactId>event-sourcing</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../</relativePath>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<spring-data-neo4j.version>4.1.2.RELEASE</spring-data-neo4j.version>
		<neo4j.version>2.3.2</neo4j.version>
 		<neo4j-ogm.version>2.0.3</neo4j-ogm.version>
		<!-- Docker & Fabric8 Configs -->
		<fabric8.version>2.2.135</fabric8.version>
		<docker.maven.plugin.version>0.15.7</docker.maven.plugin.version>
		<fabric8.dockerUser>fabric8/</fabric8.dockerUser>
		<docker.from>fabric8/java-jboss-openjdk8-jdk:1.0.13</docker.from>
		<docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>

		<docker.port.container.jolokia>8778</docker.port.container.jolokia>

		<fabric8.service.name>${project.artifactId}</fabric8.service.name>
		<fabric8.service.port>80</fabric8.service.port>
		<fabric8.service.containerPort>7002</fabric8.service.containerPort>
		<fabric8.service.type>LoadBalancer</fabric8.service.type>

		<!-- fabric8.readinessProbe.httpGet.port>8080</fabric8.readinessProbe.httpGet.port> 
			<fabric8.readinessProbe.httpGet.path>/</fabric8.readinessProbe.httpGet.path> 
			<fabric8.readinessProbe.timeoutSeconds>30</fabric8.readinessProbe.timeoutSeconds> 
			<fabric8.readinessProbe.initialDelaySeconds>5</fabric8.readinessProbe.initialDelaySeconds -->
		<fabric8.label.group>inventory</fabric8.label.group>
		<fabric8.iconRef>spring-boot-inventory</fabric8.iconRef>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix</artifactId>
		</dependency>
		<!-- dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-netflix-hystrix-stream</artifactId> 
			</dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-stream-rabbit</artifactId> 
			</dependency -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<!-- dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-sleuth-stream</artifactId> 
			</dependency -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<!-- dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-stream-binder-rabbit</artifactId> 
			</dependency -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-neo4j</artifactId>
			<version>${spring-data-neo4j.version}</version><!--$NO-MVN-MAN-VER$ -->
		</dependency>
		
		<!-- add this dependency if you want to use the embedded driver -->
		<dependency>
    		<groupId>org.neo4j</groupId>
    		<artifactId>neo4j-ogm-embedded-driver</artifactId>
    		<version>${neo4j-ogm.version}</version>
		</dependency>

		<!-- Neo4j testing -->
		  <dependency>
           <groupId>org.springframework.data</groupId>
           <artifactId>spring-data-neo4j</artifactId>
           <version>${spring-data-neo4j.version}</version>
           <type>test-jar</type>
       </dependency>

         <!-- the neo4j-ogm-test jar provides access to the http and embedded drivers for testing purposes -->
        <dependency>
          <groupId>org.neo4j</groupId>
          <artifactId>neo4j-ogm-test</artifactId>
          <version>${neo4j-ogm.version}</version>
          <!-- type>test-jar</type-->
          <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-kernel</artifactId>
			<version>${neo4j.version}</version>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.neo4j.app</groupId>
			<artifactId>neo4j-server</artifactId>
			<version>${neo4j.version}</version>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.neo4j.test</groupId>
			<artifactId>neo4j-harness</artifactId>
			<version>${neo4j.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
 	 <dependencies>
    	<dependency>
        	<groupId>org.springframework.data</groupId>
        	<artifactId>spring-data-releasetrain</artifactId>
        	<version>Hopper-SR1</version>
        	<type>pom</type>
        	<scope>import</scope>
    	</dependency>
  	</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<!-- Compiler plugin enforces Java 1.7 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<!-- version>3.3</version -->
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- version>2.18.1</version -->
				<inherited>true</inherited>
				<configuration>
					<argLine>-Djava.security.egd=file:/dev/./urandom</argLine>
					<excludes>
						<exclude>**/*KT.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>demo.InventoryApplication</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<executions>
					<execution>
						<id>json</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>json</goal>
						</goals>
					</execution>
					<execution>
						<id>attach</id>
						<phase>package</phase>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image}</name>
							<build>
								<from>${docker.from}</from>
								<assembly>
									<basedir>/app</basedir>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<env>
									<JAVA_APP_JAR>${project.build.finalName}.jar</JAVA_APP_JAR>
									<JAVA_OPTIONS>-Xmx256m -Xss256k</JAVA_OPTIONS>
								</env>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- Default sample commands: 
		mvn -Pf8-build ... build Docker images and create OpenShift deployment configs
		mvn -Pf8-deploy-registry ... f8-build + push to Docker registry + applying deployment config to OpenShift
		mvn -Pf8-deploy-node ... deployment for a single node setup without pushing to a registry
		mvn -Pf8-update-node ... update image and recreate pods without a deployment in Kubernetes
		For individual goal usage please consult the fabric8 documentation -->
	<profiles>
		<profile>
			<id>f8-build</id>
			<properties>
				<fabric8.env.SPRING_PROFILES_ACTIVE>cloud</fabric8.env.SPRING_PROFILES_ACTIVE>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:json</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-deploy-registry</id>
			<properties>
				<fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-deploy-node</id>
			<properties>
				<fabric8.recreate>true</fabric8.recreate>
				<fabric8.env.SPRING_PROFILES_ACTIVE>cloud</fabric8.env.SPRING_PROFILES_ACTIVE>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-update-node</id>
			<properties>
				<fabric8.env.SPRING_PROFILES_ACTIVE>cloud</fabric8.env.SPRING_PROFILES_ACTIVE>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:delete-pods</defaultGoal>
			</build>
		</profile>
	</profiles>
</project>